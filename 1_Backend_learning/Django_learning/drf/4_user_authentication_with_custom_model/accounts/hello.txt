

build the full role-based user management system with JWT + DRF 🔥.
This will include:

✅ Custom User model with role

✅ Signup/Login

✅ Role-based endpoints (admin, staff, user)

✅ JWT authentication



👑 Admin → full control (create/list/update/delete any user).

👷 Staff → can see all users (read-only), but cannot delete/update them.

👤 User → can only see & update their own profile.

📂 Project Structure
project/
│── project/settings.py
│── accounts/
│    ├── models.py
│    ├── serializers.py
│    ├── permissions.py
│    ├── views.py
│    ├── urls.py


1️⃣ accounts/models.py
from django.db import models
from django.contrib.auth.models import AbstractUser


class CustomUser(AbstractUser):
    ROLE_CHOICES = (
        ("admin", "Admin"),
        ("staff", "Staff"),
        ("user", "User"),
    )
    role = models.CharField(max_length=20, choices=ROLE_CHOICES, default="user")

    def __str__(self):
        return f"{self.username} ({self.role})"

2️⃣ accounts/serializers.py
from rest_framework import serializers
from .models import CustomUser


class SignupSerializer(serializers.ModelSerializer):
    password = serializers.CharField(write_only=True, min_length=8)

    class Meta:
        model = CustomUser
        fields = ["username", "email", "password", "role"]

    def create(self, validated_data):
        user = CustomUser(
            username=validated_data["username"],
            email=validated_data.get("email", ""),
            role=validated_data.get("role", "user"),
        )
        user.set_password(validated_data["password"])
        user.save()
        return user




3️⃣ accounts/permissions.py
from rest_framework.permissions import BasePermission


class IsAdmin(BasePermission):
    def has_permission(self, request, view):
        return request.user.is_authenticated and request.user.role == "admin"


class IsStaff(BasePermission):
    def has_permission(self, request, view):
        return request.user.is_authenticated and request.user.role == "staff"


class IsUser(BasePermission):
    def has_permission(self, request, view):
        return request.user.is_authenticated and request.user.role == "user"







4️⃣ accounts/views.py
from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework import status
from rest_framework.permissions import IsAuthenticated

from .serializers import SignupSerializer, UserSerializer
from .permissions import IsAdmin, IsStaff, IsUser
from .models import CustomUser


# ✅ Signup
class SignupView(APIView):
    def post(self, request):
        serializer = SignupSerializer(data=request.data)
        if serializer.is_valid():
            serializer.save()
            return Response({"message": "User created successfully"}, status=status.HTTP_201_CREATED)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)


# ✅ Admin: Full management (list & delete)
class AdminUserListView(APIView):
    permission_classes = [IsAuthenticated, IsAdmin]

    def get(self, request):
        users = CustomUser.objects.all()
        serializer = UserSerializer(users, many=True)
        return Response(serializer.data)

    def delete(self, request, user_id):
        try:
            user = CustomUser.objects.get(id=user_id)
            user.delete()
            return Response({"message": "User deleted"}, status=status.HTTP_204_NO_CONTENT)
        except CustomUser.DoesNotExist:
            return Response({"error": "User not found"}, status=status.HTTP_404_NOT_FOUND)


# ✅ Staff: Read-only access to all users
class StaffUserListView(APIView):
    permission_classes = [IsAuthenticated, IsStaff]

    def get(self, request):
        users = CustomUser.objects.all()
        serializer = UserSerializer(users, many=True)
        return Response(serializer.data)


# ✅ User: Manage own profile
class UserProfileView(APIView):
    permission_classes = [IsAuthenticated, IsUser]

    def get(self, request):
        serializer = UserSerializer(request.user)
        return Response(serializer.data)

    def put(self, request):
        serializer = UserSerializer(request.user, data=request.data, partial=True)
        if serializer.is_valid():
            serializer.save()
            return Response({"message": "Profile updated", "user": serializer.data})
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)





6️⃣ project/settings.py

Make sure you have these:

INSTALLED_APPS = [
    ...
    "rest_framework",
    "rest_framework_simplejwt",
    "accounts",
]

AUTH_USER_MODEL = "accounts.CustomUser"

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    )
}


7️⃣ Migrate and Run
python manage.py makemigrations accounts
python manage.py migrate
python manage.py runserver